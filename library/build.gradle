apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion as Integer
    buildToolsVersion rootProject.ext.buildToolsVersion as String

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion as Integer
        targetSdkVersion rootProject.ext.targetSdkVersion as Integer
        versionCode rootProject.ext.versionCode as Integer
        versionName rootProject.ext.versionName as String
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api "androidx.recyclerview:recyclerview:1.0.0"
}

//install {
//    repositories.mavenInstaller {
//        pom.project {
//            name POM_NAME
//            description 'RecyclerView decorator for sticky list headers.'
//            url 'https://github.com/WhistleLabs/sticky-headers-recyclerview'
//            inceptionYear '2016'
//
//            packaging POM_PACKAGING
//            groupId GROUP
//            artifactId POM_ARTIFACT_ID
//            version VERSION_NAME
//
//            scm {
//                connection 'https://github.com/WhistleLabs/sticky-headers-recyclerview.git'
//                url 'https://github.com/WhistleLabs/sticky-headers-recyclerview'
//
//            }
//            developers {
//                developer {
//                    name 'Whistle'
//                }
//            }
//        }
//    }
//}

bintray {
    user = getMavenUsername()
    key = getMavenPassword()
    publications = ['StickyHeadersRecyclerView']
    publish = VERSION_NAME.contains("SNAPSHOT")
    override = VERSION_NAME.contains("SNAPSHOT")
    pkg {
        repo = 'maven-internal'
        name = POM_ARTIFACT_ID
        userOrg = 'whistle'
        licenses = []
        vcsUrl = 'https://github.com/WhistleLabs/sticky-headers-recyclerview'

        version {
            name = VERSION_NAME
            desc = 'sticky-headers-recyclerview with androidx module'
            released = new Date()
        }
    }
}

publishing {
    publications {
        StickyHeadersRecyclerView(MavenPublication) {
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            artifact file('build/outputs/aar/library-release.aar')
            artifact androidJavadocsJar
            artifact androidSourcesJar

            // AAR publications don't automatically know about our dependencies, so add them to pom manually
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { // only add 'compile' dependencies
                    if (it.group && it.name && it.version) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.addStringOption("tag", 'inspiredby::"Inspired by:"')
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

afterEvaluate {
    androidJavadocs.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

def getMavenUsername() {
    project.hasProperty("WHISTLE_MAVEN_USERNAME") ? project.property("WHISTLE_MAVEN_USERNAME") : System.getenv('WHISTLE_MAVEN_USERNAME')
}

def getMavenPassword() {
    project.hasProperty('WHISTLE_MAVEN_PASSWORD') ? project.property('WHISTLE_MAVEN_PASSWORD') : System.getenv('WHISTLE_MAVEN_PASSWORD')
}
